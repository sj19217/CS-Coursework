start_text ["; Prints the fibonacci sequence up to 50 places\nsection.meta\nmem_amt=2\n\nsection.data\ntemp VAR uint 0\ni VAR char 40\n\nsection.text\nMOV 4B eax 1\nMOV 4B ebx 1\nloop MOV 4B temp eax\nADD uint eax ebx\n;ADD short ebx temp\nMOV 4B ebx temp\n\nSUB char i 1\nMOV 4B out eax\nCMP char i 0\nJNE loop\nHLT"]
remove_comments ["\nsection.meta\nmem_amt=2\n\nsection.data\ntemp VAR uint 0\ni VAR char 40\n\nsection.text\nMOV 4B eax 1\nMOV 4B ebx 1\nloop MOV 4B temp eax\nADD uint eax ebx\n\nMOV 4B ebx temp\n\nSUB char i 1\nMOV 4B out eax\nCMP char i 0\nJNE loop\nHLT"]
remove_empty_lines ["section.meta\nmem_amt=2\nsection.data\ntemp VAR uint 0\ni VAR char 40\nsection.text\nMOV 4B eax 1\nMOV 4B ebx 1\nloop MOV 4B temp eax\nADD uint eax ebx\nMOV 4B ebx temp\nSUB char i 1\nMOV 4B out eax\nCMP char i 0\nJNE loop\nHLT"]
remove_dup_wspace ["section.meta\nmem_amt=2\nsection.data\ntemp VAR uint 0\ni VAR char 40\nsection.text\nMOV 4B eax 1\nMOV 4B ebx 1\nloop MOV 4B temp eax\nADD uint eax ebx\nMOV 4B ebx temp\nSUB char i 1\nMOV 4B out eax\nCMP char i 0\nJNE loop\nHLT"]
split ["mem_amt=2", "temp VAR uint 0\ni VAR char 40", "MOV 4B eax 1\nMOV 4B ebx 1\nloop MOV 4B temp eax\nADD uint eax ebx\nMOV 4B ebx temp\nSUB char i 1\nMOV 4B out eax\nCMP char i 0\nJNE loop\nHLT"]
start_proc_meta
read_meta_line ["mem_amt=2"]
ustd_meta_line ["Config item mem_amt has value 2"]
start_proc_data
read_data_line ["temp VAR uint 0"]
ustd_data_line ["Variable 'temp' has type 'uint' and initial value '0'"]
read_data_line ["i VAR char 40"]
ustd_data_line ["Variable 'i' has type 'char' and initial value '40'"]
start_proc_text
read_text_line ["MOV 4B eax 1"]
ustd_text_line ["Instruction 2. Opcode=MOV, type=int, label=, op1=\"eax\", op2=1"]
read_text_line ["MOV 4B ebx 1"]
ustd_text_line ["Instruction 3. Opcode=MOV, type=int, label=, op1=\"ebx\", op2=1"]
read_text_line ["loop MOV 4B temp eax"]
ustd_text_line ["Instruction 4. Opcode=MOV, type=int, label=loop, op1=AddressOperand(temp), op2=\"eax\""]
read_text_line ["ADD uint eax ebx"]
ustd_text_line ["Instruction 5. Opcode=ADD, type=uint, label=, op1=\"eax\", op2=\"ebx\""]
read_text_line ["MOV 4B ebx temp"]
ustd_text_line ["Instruction 6. Opcode=MOV, type=int, label=, op1=\"ebx\", op2=AddressOperand(temp)"]
read_text_line ["SUB char i 1"]
ustd_text_line ["Instruction 7. Opcode=SUB, type=char, label=, op1=AddressOperand(i), op2=1"]
read_text_line ["MOV 4B out eax"]
ustd_text_line ["Instruction 8. Opcode=MOV, type=int, label=, op1=\"out\", op2=\"eax\""]
read_text_line ["CMP char i 0"]
ustd_text_line ["Instruction 9. Opcode=CMP, type=char, label=, op1=AddressOperand(i), op2=0"]
read_text_line ["JNE loop"]
ustd_text_line ["Instruction 10. Opcode=JNE, type=char, label=, op1=AddressOperand(loop), op2=None"]
read_text_line ["HLT"]
ustd_text_line ["Instruction 11. Opcode=HLT, type=0, label=, op1=None, op2=None"]
start_lv_detect
found_var [temp] [0] [uint]
found_var [i] [4] [char]
found_label [] [2]
found_label [] [3]
found_label [loop] [4]
found_label [] [5]
found_label [] [6]
found_label [] [7]
found_label [] [8]
found_label [] [9]
found_label [] [10]
found_label [] [11]
mem_offsets {"temp": 66, "i": 70, "loop": 22}
conv_meta [109, 101, 109, 95, 97, 109, 116, 61, 50, 38, 0, 0, 0, 0]
conv_instr [18] [82] [0, 0, 0, 66] [0]
conv_instr [16] [82] [0, 0, 0, 70] [40]
conv_instr [18] [18] [160] [1]
conv_instr [18] [18] [176] [1]
conv_instr [18] [81] [0, 0, 0, 66] [160]
conv_instr [37] [17] [160] [176]
conv_instr [18] [21] [176] [0, 0, 0, 66]
conv_instr [40] [82] [0, 0, 0, 70] [1]
conv_instr [18] [17] [240] [160]
conv_instr [1] [82] [0, 0, 0, 70] [0]
conv_instr [10] [80] [0, 0, 0, 22] []
conv_instr [0] [0] [] []
end [109, 101, 109, 95, 97, 109, 116, 61, 50, 38, 0, 0, 0, 0, 18, 82, 0, 0, 0, 66, 0, 16, 82, 0, 0, 0, 70, 40, 18, 18, 160, 1, 18, 18, 176, 1, 18, 81, 0, 0, 0, 66, 160, 37, 17, 160, 176, 18, 21, 176, 0, 0, 0, 66, 40, 82, 0, 0, 0, 70, 1, 18, 17, 240, 160, 1, 82, 0, 0, 0, 70, 0, 10, 80, 0, 0, 0, 22, 0, 0]
